
@model PagedList.IPagedList<KeenanBuff.Models.MatchViewModel>
@using PagedList.Mvc;
@{
    ViewBag.Title = "Index";
}



<article>
    <div class="r-table performances-overview ">


        <table class="matches">
            <thead>
                <tr>
                    <th >Hero</th>
                    <th class="r-none-tablet"></th>
                    <th>Result</th>
                    <th>Type</th>
                    <th>Duration</th>
                    <th>KDA</th>
                    <th class="r-none-tablet" style="min-width: 200px">Items</th>
                </tr>
            </thead>
            @foreach (var item in Model)
            {
            <tr>       
                        <td class="r-fluid r-5 r-icon-text">
                            <div class="r-body">
                                <div class="image-container image-container-hero image-container-icon">
                                    <img src="@Url.Content(item.HeroUrl)">
                                </div>
                            </div>
                        </td> <!--Hero Icon-->
                        <td class="r-fluid r-23 r-none-tablet">
                            <a class="won" href="@Url.Content(String.Format("../../Matches/Details/{0}", item.MatchID))">@Html.DisplayFor(modelitem => item.HeroName)</a>
                            <div class="subtext">
                                High Skill
                            </div>
                        </td>
                        <td class="r-fluid r-125 r-text-only r-right r-match-result">
                            <div class="r-body">
                                @if ((item.RadiantWin && item.PlayerSlot < 5) || (!item.RadiantWin && item.PlayerSlot > 5))
                                {
                                <a class="won" href="@Url.Content(String.Format("../../Matches/Details/{0}", item.MatchID))">Won Match</a>
                                }
                                else
                                {
                            <a class="lost" href="@Url.Content(String.Format("../../Matches/Details/{0}", item.MatchID))">Lost Match</a>
                                }

                                <div class="subtext">
                                    @item.StartTime
                                </div>
                            </div>
                        </td> <!-- Result-->
                        <td class="game-mode r-fluid r-125 r-text-only r-first">
                            <div class="r-body">
                                @Html.DisplayFor(modelItem => item.LobbyString)
                                <div class="subtext">
                                    @Html.DisplayFor(modelItem => item.GameMode)
                                </div>
                            </div>
                        </td> <!--Type-->
                        <td class="r-fluid r-125 r-duration">
                            <div class="r-body">
                                @item.Duration
                            </div>
                        </td> <!-- Duration-->
                        <td class="r-fluid r-125">
                            <div class="r-body">
                                <span class="kda-record">
                                    @item.Kda
                                </span>
                            </div>
                        </td> <!--KDA-->
                        <td class="tf-r r-tab r-group-2 cell-minor r-none-tablet">
                            <div class="r-fluid r-30">
                                @foreach (var playeritem in item.Items.Where(i => i.Item.ItemUrl != "None"))
                                {
                                <div class="image-container-item">
                                    <img class="image-item" src="@Url.Content(String.Format("{0}", playeritem.Item.ItemUrl))">
                                </div>
                                
                                }
                           </div>
                        </td>               
            </tr>
            }
        </table>
    </div>
    <div class="reset-button">
        <button class="reset-button" onclick="Reload()" ></button>
    </div>
    <div>Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</div>
        
        @Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
</article>